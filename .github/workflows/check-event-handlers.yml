name: Check Event Handler Patterns

on:
  pull_request:
    branches: [ main ]

jobs:
  check-event-handlers:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            libs/**/*.tsx
            libs/**/*.jsx
          
      - name: Check event handler patterns
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # Initialize arrays for tracking issues
          invalid_patterns=()
          
          # Check each changed JSX/TSX file
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "Checking $file for event handler patterns..."
            
            # Read file line by line with line numbers for reporting
            line_num=0
            searching_multiline=false
            multiline_event_start_line=0
            multiline_pattern=""
            multiline_event_name=""
            
            while IFS= read -r line; do
              line_num=$((line_num + 1))
              
              # Continue building multiline pattern if we're in the middle of one
              if $searching_multiline; then
                multiline_pattern="$multiline_pattern\n$line"
                
                # Check if this line contains the end of the event handler (closing curly brace and bracket)
                if [[ "$line" =~ \]\s*\}? ]]; then
                  searching_multiline=false
                  
                  # Now validate the full multiline pattern to ensure it starts with `[`
                  # It can be surrounded by optional `{}`
                  if [[ "$multiline_pattern" =~ ^\s*\{?\s*\[ ]]; then
                    # Valid pattern with array syntax
                    continue
                  else
                    # No array syntax found
                    invalid_patterns+=("$file:$multiline_event_start_line:$multiline_event_name at line $multiline_event_start_line requires array pattern")
                  fi
                fi
                continue
              fi
              
              # Match event handlers like onXxx$={...} that are not single-line valid patterns
              if [[ "$line" =~ on[A-Z][a-zA-Z0-9]*\$= ]] && ! [[ "$line" =~ \]\s*\}? ]]; then
                # Extract the event name (without the trailing $=)
                event_name=$(echo "$line" | grep -o 'on[A-Za-z0-9]*\$=' | sed 's/\$=//')
                
                # Skip if the event name contains "qds" (case insensitive) or is exactly "onQVisible"
                if [[ "${event_name,,}" =~ qds ]] || [[ "$event_name" == "onQVisible" ]]; then
                  continue
                fi
                
                # Check for ternaries on a single line, which is a valid exception
                if [[ "$line" =~ \?.*:.*\} ]]; then
                  continue
                fi
                
                # This is the start of a multiline pattern
                searching_multiline=true
                multiline_event_start_line=$line_num
                multiline_pattern=$(echo "$line" | sed -E 's/.*on[A-Z][a-zA-Z0-9]*\$=\{?//')
                multiline_event_name=$event_name
              fi
            done < <(cat "$file")
          done
          
          # Report invalid patterns
          if [ ${#invalid_patterns[@]} -gt 0 ]; then
            echo "❌ Found ${#invalid_patterns[@]} event handler(s) that don't use array pattern:"
            echo ""
            
            # First, list all problematic files clearly
            for pattern in "${invalid_patterns[@]}"; do
              # Extract file, line number and content
              file_path=$(echo "$pattern" | cut -d':' -f1)
              line_num=$(echo "$pattern" | cut -d':' -f2)
              line_content=$(echo "$pattern" | cut -d':' -f3-)
              
              echo "❌ $file_path:$line_num - $line_content"
            done
            
            echo ""
            echo "::error title=Invalid Event Handler Patterns::❌ Event handlers must use array pattern"
            echo "::group::Event handlers with invalid patterns"
            
            for pattern in "${invalid_patterns[@]}"; do
              # Extract file, line number and content
              file_path=$(echo "$pattern" | cut -d':' -f1)
              line_num=$(echo "$pattern" | cut -d':' -f2)
              line_content=$(echo "$pattern" | cut -d':' -f3-)
              
              echo "::error file=$file_path,line=$line_num::Event handler should use array pattern: $line_content"
            done
            
            echo "::endgroup::"
            
            echo "::group::How to fix"
            echo "Event handlers should use the array pattern to combine local handlers with props:"
            echo ""
            echo "❌ Bad: onKeyDown$={handleKeyDown$}"
            echo "✅ Good: onKeyDown$={[handleKeyDown$, props.onKeyDown$]}"
            echo ""
            echo "If this is a custom event that doesn't need the array pattern, you can:"
            echo "- Include 'qds' in your event name (e.g., onQdsCustomEvent$ or onCustomQdsEvent$)"
            echo "- Use the specific event name 'onQVisible$'"
            echo "::endgroup::"
            
            exit 1
          else
            echo "✅ All event handlers use the proper array pattern."
          fi