name: Check Event Handler Patterns

on:
  pull_request:
    branches: [ main ]

jobs:
  check-event-handlers:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            libs/**/*.tsx
            libs/**/*.jsx
          
      - name: Check event handler patterns
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # Initialize arrays for tracking issues
          invalid_patterns=()
          
          # Check each changed JSX/TSX file
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "Checking $file for event handler patterns..."
            
            # Read the entire file into a variable to handle multiline patterns
            file_content=$(cat "$file")
            
            # Read file line by line with line numbers for reporting
            line_num=0
            searching_multiline=false
            multiline_event_start_line=0
            multiline_pattern=""
            multiline_event_name=""
            
            while IFS= read -r line; do
              line_num=$((line_num + 1))
              
              # Continue building multiline pattern if we're in the middle of one
              if $searching_multiline; then
                multiline_pattern="$multiline_pattern\n$line"
                
                # Check if this line contains the end of the event handler (closing curly brace)
                if [[ "$line" =~ \} ]]; then
                  searching_multiline=false
                  
                  # Now validate the full multiline pattern
                  # Check if it contains array syntax [...] with content anywhere in the pattern
                  # Using a more flexible regex that checks for an opening square bracket followed by any content
                  # followed by a closing square bracket
                  if [[ "$multiline_pattern" =~ \[[^]]*\] ]]; then
                    # Valid pattern with array syntax
                    continue
                  elif [[ "$multiline_pattern" =~ \? ]]; then
                    # It's a ternary - check if either branch has array syntax
                    if [[ "$multiline_pattern" =~ \?[^:]*\[[^]]*\] ]] || [[ "$multiline_pattern" =~ :[^}]*\[[^]]*\] ]]; then
                      # Valid ternary with array on either side
                      continue
                    else
                      # Ternary without array syntax
                      invalid_patterns+=("$file:$multiline_event_start_line:$multiline_event_name at line $multiline_event_start_line requires array pattern")
                    fi
                  else
                    # No array syntax found
                    invalid_patterns+=("$file:$multiline_event_start_line:$multiline_event_name at line $multiline_event_start_line requires array pattern")
                  fi
                fi
                continue
              fi
              
              # Match event handlers like onXxx$={...}
              if [[ "$line" =~ on[A-Z][a-zA-Z0-9]*\$= ]]; then
                # Extract the event name (without the trailing $=)
                event_name=$(echo "$line" | grep -o 'on[A-Za-z0-9]*\$=' | sed 's/\$=//')
                
                # Skip if the event name contains "qds" (case insensitive) or is exactly "onQVisible"
                # Note: Comparison is now against "onQVisible" because sed removes the '$='
                if [[ "${event_name,,}" =~ qds ]] || [[ "$event_name" == "onQVisible" ]]; then
                  continue
                fi
                
                # Check if the event handler is complete on this line
                # Look for matching curly braces - if we have equal number of opening/closing, it's a single line
                open_braces=$(echo "$line" | grep -o '{' | wc -l)
                close_braces=$(echo "$line" | grep -o '}' | wc -l)
                
                if [[ $open_braces -eq $close_braces ]]; then
                  # Single line pattern - check for array syntax
                  if ! [[ "$line" =~ on[A-Z][a-zA-Z0-9]*\$=\{[^{}]*\[[^{}]*\][^{}]*\} ]]; then
                    invalid_patterns+=("$file:$line_num:$event_name at line $line_num requires array pattern")
                  fi
                else
                  # This is the start of a multiline pattern
                  searching_multiline=true
                  multiline_event_start_line=$line_num
                  multiline_pattern=$line
                  multiline_event_name=$event_name
                fi
              fi
            done < "$file"
          done
          
          # Report invalid patterns
          if [ ${#invalid_patterns[@]} -gt 0 ]; then
            echo "::error title=Invalid Event Handler Patterns::❌ Event handlers must use array pattern"
            echo "::group::Event handlers with invalid patterns"
            
            for pattern in "${invalid_patterns[@]}"; do
              # Extract file, line number and content
              file_path=$(echo "$pattern" | cut -d':' -f1)
              line_num=$(echo "$pattern" | cut -d':' -f2)
              line_content=$(echo "$pattern" | cut -d':' -f3-)
              
              echo "::error file=$file_path,line=$line_num::Event handler should use array pattern: $line_content"
            done
            
            echo "::endgroup::"
            
            echo "::group::How to fix"
            echo "Event handlers should use the array pattern to combine local handlers with props:"
            echo ""
            echo "❌ Bad: onKeyDown$={handleKeyDown$}"
            echo "✅ Good: onKeyDown$={[handleKeyDown$, props.onKeyDown$]}"
            echo ""
            echo "If this is a custom event that doesn't need the array pattern, you can:"
            echo "- Include 'qds' in your event name (e.g., onQdsCustomEvent$ or onCustomQdsEvent$)"
            echo "- Use the specific event name 'onQVisible$'"
            echo "::endgroup::"
            
            exit 1
          else
            echo "✅ All event handlers use the proper array pattern."
          fi