{
  "components": [
    {
      "Dropdown Root": {
        "inheritsFrom": "PopoverRoot",
        "types": [
          {
            "PublicDropdownRootProps": [
              {
                "comment": "Whether the dropdown is open by default (uncontrolled).",
                "prop": "open",
                "type": "boolean",
                "defaultValue": "false"
              },
              {
                "comment": "Controlled open state signal.",
                "prop": "bind:open",
                "type": "Signal<boolean>"
              },
              {
                "comment": "Callback fired when dropdown open state changes.",
                "prop": "onOpenChange$",
                "type": "(open: boolean) => void"
              }
            ]
          }
        ],
        "dataAttributes": [
          {
            "name": "data-qds-dropdown-root",
            "comment": "Present on the root element."
          },
          {
            "name": "data-open",
            "comment": "Present when the dropdown is open."
          },
          {
            "name": "data-closed",
            "comment": "Present when the dropdown is closed."
          }
        ]
      }
    },
    {
      "Dropdown Trigger": {
        "inheritsFrom": "PopoverTrigger",
        "ariaAttributes": [
          {
            "name": "aria-haspopup",
            "value": "menu"
          },
          {
            "name": "aria-expanded",
            "value": "boolean"
          },
          {
            "name": "aria-controls",
            "value": "string (ID of content element)"
          }
        ],
        "dataAttributes": [
          {
            "name": "data-qds-dropdown-trigger",
            "comment": "Present on the trigger element."
          }
        ]
      }
    },
    {
      "Dropdown Content": {
        "inheritsFrom": "PopoverContent",
        "ariaAttributes": [
          {
            "name": "role",
            "value": "menu"
          },
          {
            "name": "aria-labelledby",
            "value": "string (ID of trigger element)"
          }
        ],
        "dataAttributes": [
          {
            "name": "data-qds-dropdown-content",
            "comment": "Present on the content element."
          }
        ]
      }
    },
    {
      "Dropdown Item": {
        "inheritsFrom": "div",
        "types": [
          {
            "PublicDropdownItemProps": [
              {
                "comment": "Whether the item is interactive.",
                "prop": "disabled",
                "type": "boolean"
              },
              {
                "comment": "Callback fired when the item is selected.",
                "prop": "onSelect$",
                "type": "((value: string) => void)"
              },
              {
                "comment": "Whether to close the dropdown when the item is selected",
                "prop": "closeOnSelect",
                "type": "boolean",
                "defaultValue": "true"
              },
              {
                "comment": "Data value associated with this item, passed to onSelect$ when selected",
                "prop": "value",
                "type": "string"
              }
            ]
          }
        ],
        "ariaAttributes": [
          {
            "name": "role",
            "value": "menuitem"
          },
          {
            "name": "aria-disabled",
            "value": "boolean"
          }
        ],
        "dataAttributes": [
          {
            "name": "data-qds-dropdown-item",
            "comment": "Present on the item element."
          },
          {
            "name": "data-disabled",
            "comment": "Present when the item is disabled."
          },
          {
            "name": "data-highlighted",
            "comment": "Present when the item is highlighted via keyboard navigation."
          }
        ]
      }
    },
    {
      "Dropdown ItemLabel": {
        "inheritsFrom": "span",
        "dataAttributes": [
          {
            "name": "data-qds-dropdown-item-label",
            "comment": "Present on the item label element."
          }
        ]
      }
    },
    {
      "Dropdown Submenu": {
        "inheritsFrom": "Dropdown Root",
        "types": [
          {
            "PublicDropdownSubmenuProps": [
              {
                "comment": "The position of the submenu relative to its trigger (right, left, bottom, top).",
                "prop": "position",
                "type": "'right' | 'left' | 'bottom' | 'top'",
                "defaultValue": "'right'"
              }
            ]
          }
        ],
        "dataAttributes": [
          {
            "name": "data-qds-dropdown-submenu",
            "comment": "Present on the submenu container."
          }
        ]
      }
    },
    {
      "Dropdown SubmenuTrigger": {
        "inheritsFrom": "Dropdown.Item",
        "ariaAttributes": [
          { "name": "aria-haspopup", "value": "menu" },
          { "name": "aria-expanded", "value": "boolean" },
          { "name": "aria-controls", "value": "string (ID of submenu content)" }
        ],
        "dataAttributes": [
          {
            "name": "data-qds-dropdown-submenu-trigger",
            "comment": "Present on the submenu trigger item."
          }
        ]
      }
    },
    {
      "Dropdown SubmenuContent": {
        "inheritsFrom": "Dropdown.Content",
        "ariaAttributes": [
          { "name": "role", "value": "menu" },
          { "name": "aria-labelledby", "value": "string (ID of submenu trigger)" }
        ],
        "dataAttributes": [
          {
            "name": "data-qds-dropdown-submenu-content",
            "comment": "Present on the submenu content element."
          }
        ]
      }
    }
  ],
  "anatomy": [
    {
      "name": "Dropdown.Root",
      "description": "Root container for the dropdown, manages state and context."
    },
    {
      "name": "Dropdown.Trigger",
      "description": "The button element that toggles the dropdown visibility."
    },
    {
      "name": "Dropdown.Content",
      "description": "The container element for the menu items, positioned relative to the trigger."
    },
    {
      "name": "Dropdown.Item",
      "description": "An interactive menu item within the dropdown."
    },
    {
      "name": "Dropdown.ItemLabel",
      "description": "The text content or label for a Dropdown.Item."
    },
    {
      "name": "Dropdown.Submenu",
      "description": "Container for a nested submenu, manages its own open state and context."
    },
    {
      "name": "Dropdown.SubmenuTrigger",
      "description": "The item that triggers opening of the submenu."
    },
    {
      "name": "Dropdown.SubmenuContent",
      "description": "The container for submenu items, positioned relative to the submenu trigger."
    }
  ],
  "keyboardInteractions": [
    {
      "key": "Enter",
      "comment": "When focus is on a dropdown item, selects the item and closes the dropdown."
    },
    {
      "key": "Space",
      "comment": "When focus is on a dropdown item, selects the item and closes the dropdown."
    },
    {
      "key": "ArrowDown",
      "comment": "When focus is within the dropdown content, moves focus/highlight to the next menu item or opens a submenu if on a submenu trigger."
    },
    {
      "key": "ArrowUp",
      "comment": "When focus is within the dropdown content, moves focus/highlight to the previous menu item."
    },
    {
      "key": "ArrowRight",
      "comment": "When focus is on a submenu trigger, opens the submenu and moves focus to its first item."
    },
    {
      "key": "ArrowLeft",
      "comment": "When focus is within a submenu, closes the submenu and returns focus to the submenu trigger."
    },
    {
      "key": "Escape",
      "comment": "When the dropdown or submenu is open, closes the dropdown or submenu."
    },
    {
      "key": "Tab",
      "comment": "Moves focus to the next focusable element; closes the dropdown when focus leaves."
    },
    {
      "key": "Home",
      "comment": "When focus is on a dropdown item, moves focus to the first enabled item in the dropdown or submenu."
    },
    {
      "key": "End",
      "comment": "When focus is on a dropdown item, moves focus to the last enabled item in the dropdown or submenu."
    }
  ],
  "features": [
    "WAI ARIA Menu design pattern compliance",
    "Arrow key navigation between items and submenus",
    "Home/End key support for first/last item navigation",
    "Disabled item states and handling",
    "Keyboard selection with Enter/Space",
    "Custom close behavior per item",
    "Focus management between items and submenus",
    "Automatic ARIA labeling and relationships",
    "Event callbacks for open state changes",
    "Popover positioning system integration",
    "Nested submenus with triggers and content"
  ]
}
